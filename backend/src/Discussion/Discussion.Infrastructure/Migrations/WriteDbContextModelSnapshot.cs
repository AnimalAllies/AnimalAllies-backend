// <auto-generated />
using System;
using System.Collections.Generic;
using Discussion.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Discussion.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("discussions")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Discussion.Domain.Aggregate.Discussion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("relation_id");

                    b.ComplexProperty<Dictionary<string, object>>("DiscussionStatus", "Discussion.Domain.Aggregate.Discussion.DiscussionStatus#DiscussionStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("discussion_status");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Users", "Discussion.Domain.Aggregate.Discussion.Users#Users", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("FirstMember")
                                .HasColumnType("uuid")
                                .HasColumnName("first_member");

                            b1.Property<Guid>("SecondMember")
                                .HasColumnType("uuid")
                                .HasColumnName("second_member");
                        });

                    b.HasKey("Id")
                        .HasName("pk_discussions");

                    b.ToTable("discussions", "discussions");
                });

            modelBuilder.Entity("Discussion.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscussionId")
                        .HasColumnType("uuid")
                        .HasColumnName("discussion_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "Discussion.Domain.Entities.Message.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("created_at");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("IsEdited", "Discussion.Domain.Entities.Message.IsEdited#IsEdited", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("Value")
                                .HasColumnType("boolean")
                                .HasColumnName("is_edited");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Text", "Discussion.Domain.Entities.Message.Text#Text", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1500)
                                .HasColumnType("character varying(1500)")
                                .HasColumnName("text");
                        });

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("DiscussionId")
                        .HasDatabaseName("ix_messages_discussion_id");

                    b.ToTable("messages", "discussions");
                });

            modelBuilder.Entity("Discussion.Domain.Entities.Message", b =>
                {
                    b.HasOne("Discussion.Domain.Aggregate.Discussion", null)
                        .WithMany("Messages")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_discussions_discussion_id");
                });

            modelBuilder.Entity("Discussion.Domain.Aggregate.Discussion", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
